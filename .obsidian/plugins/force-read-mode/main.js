/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var d=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var u=(n,t)=>{for(var s in t)d(n,s,{get:t[s],enumerable:!0})},m=(n,t,s,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of c(t))!p.call(n,a)&&a!==s&&d(n,a,{get:()=>t[a],enumerable:!(e=h(t,a))||e.enumerable});return n};var w=n=>m(d({},"__esModule",{value:!0}),n);var b={};u(b,{default:()=>r});module.exports=w(b);var i=require("obsidian"),f={targetFolderPaths:[]},r=class extends i.Plugin{constructor(){super(...arguments);this.isEnabled=!0}async onload(){await this.loadSettings(),this.addSettingTab(new l(this.app,this)),this.registerEvent(this.app.workspace.on("layout-change",this.onLayoutChange.bind(this))),this.toggleCommand()}toggleCommand(){this.addCommand({id:"toggle-force-read-mode",name:this.isEnabled?"Disable":"Enable",callback:()=>{this.isEnabled=!this.isEnabled,new i.Notice(`Force Read Mode ${this.isEnabled?"Enabled":"Disabled"}`),this.toggleCommand()}})}async onLayoutChange(){let s=this.app.workspace.getLeavesOfType("markdown");this.isEnabled&&s.forEach(e=>{if(!(e.view instanceof i.MarkdownView))return;let a=e.view.file;!a||!this.settings.targetFolderPaths.some(g=>a.path.startsWith(g))||e.setViewState({...e.getViewState(),state:{mode:"preview"}})})}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},l=class extends i.PluginSettingTab{constructor(s,e){super(s,e);this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new i.Setting(s).setName("Target folder paths").setDesc("Specify the folder paths where markdown files should always open in read mode.").addTextArea(e=>e.setPlaceholder("Enter folder paths, one per line").setValue(this.plugin.settings.targetFolderPaths.join(`
`)).onChange(async a=>{this.plugin.settings.targetFolderPaths=a.split(`
`).map(o=>o.trim()).filter(o=>o.length>0),await this.plugin.saveSettings()}))}};

/* nosourcemap */